

generator client {
  provider = "prisma-client-js"
  engineType = "library"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id           String         @id @default(cuid())
  name         String?
  username     String?       @unique
  email        String?       @unique
  emailVerified DateTime?
  image        String?
  password     String?
  bio          String?
  role         String?
  applications Application[]
  hackathons   Hackathon[]
  accounts     Account[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  resumeUrl    String?  
  linkedinUrl  String?  
  githubUrl    String? 
  skills       String[]

  externalFavorites ExternalHackathonFavorite[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Hackathon {
  id             String       @id @default(cuid())
  teamName       String
  hackathonName  String
  regURL         String
  hackathonMode  String
  memberCount    String
  skills         String[]
  role           String
  experience     String
  regDate        DateTime
  location       String
  description    String       
  userId         String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  applications   Application[]
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

}



model ExternalHackathonFavorite {
  id              String   @id @default(cuid())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  externalId      String   // ID from external API
  title           String
  url             String
  logo            String?
  platform        String   // 'unstop', 'devpost', 'devfolio'
  mode            String?
  location        String?
  status          String?
  createdAt       DateTime @default(now())

  @@unique([userId, externalId, platform])
}

model Application {
  id          String   @id @default(cuid())
  candidateId String
  postId      String
  status      ApplicationStatus @default(PENDING)
  createdAt   DateTime @default(now())
  linkedinUrl String?
  githubUrl   String?
  resumeUrl   String?
  post Hackathon @relation(fields: [postId], references: [id])
  user User     @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  @@unique([candidateId, postId]) 
}



model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime
  @@unique([email, token])
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}


model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

